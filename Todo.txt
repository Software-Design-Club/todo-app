
Todos:
- [x] Allow users to update state on Todos table
- [x] Make list read only unless user is signed in
- [x] 404 for missing list ID
- [x] User can add todo
- [x] User can edit todo
- [x] User "delete" todo
- [x] Where to put core business logic?
- [ ] Update todos with Ajax calls instead of server actions
- [ ] User can create a list
- [ ] User can change lists visibility. Private lists are only visible to the creator and collaborators.
      Public lists are visible to everyone.
- [ ] Persisting sort through list updates
- [ ] Filtering the todos

Notes:
  - We called `notFound()` in `getListWithTodos` to handle the case where the list ID is not found.
  - This may lead to a pattern where we always respond to a db returning  null with 404 when we may want to do something else.
  - Another way to have a custom 404 page at the specific route
 - Note for next time: list/page.tsx is a server component, AddTodoForm is a client component(it uses useState).
 - We want to update TodoList when AddTodoForm is submitted. TodoList is a client component that uses useState.
 - We need to update the state of TodoList when AddTodoForm is submitted.

Notes 2/2/2025:
- Onblur is not a good event to use to close the edit mode. It seems to prevent the form from being submitted.


Notes 2/9/2025:
- Client side sorting does not keep persist after updating the data.
- We think this is because Next.js is refreshing the page.


Notes 2/16/2025:
- We decided to split the business by route/feature for now
- We will see if we need to change it later.


Notes 2/23/2025:
- We noticed a trade off between using server actions and client side updates. The server actions did not update the client reliably
- We tried revalidating the path, but it did not work.
- We want to investigate if there is some trick/config to make it work.
