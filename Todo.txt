
Todos:
- [x] Allow users to update state on Todos table
- [x] Make list read only unless user is signed in
- [x] 404 for missing list ID
- [x] User can add todo
- [x] User can edit todo
- [x] User "delete" todo
- [x] Where to put core business logic?
- [x] Get todos with query client using React Query
- [x] User can create a list
- [x] User can invite collaborators to a list
- [x] User can see collaborators on a list
- [x] User can remove collaborators from a list
- [ ] Add list authorization. Users can only edit list they create or are a collaborator on.
       - [/] Add opaque types for list and user ids
       - [x] Add role to ListCollaborator table
       - [ ] Backfill ListCollaborator table with roles and ids of list creators
       - [ ] Add function to check if user is authorized to edit list using the opaque types
- [ ] Visually whether the user is a collaborator or a creator of the list when on list page
- [ ] User can see lists they are a collaborator on their lists view
- [ ] User can change lists visibility. Private lists are only visible to the creator and collaborators. Public lists are visible to everyone.
- [ ] User can delete/archive a list
- [ ] Creator/Collaborator can share a link to a list if its public
- [ ] User can invite someone who is not signed up to the app to a list - Send email to invitee
- [ ] Creator/Collaborator can assign todos to collaborators on a list
- [ ] ??Creator can move todos to a different list
- [ ] ??Collaborator can be notified when they are invited to a list in the app and in their email
- [ ] ??User can be notified when a todo is assigned to them
- [ ] Clean up components/ui and ui/ folder

Notes:
  - We called `notFound()` in `getListWithTodos` to handle the case where the list ID is not found.
  - This may lead to a pattern where we always respond to a db returning  null with 404 when we may want to do something else.
  - Another way to have a custom 404 page at the specific route
 - Note for next time: list/page.tsx is a server component, AddTodoForm is a client component(it uses useState).
 - We want to update TodoList when AddTodoForm is submitted. TodoList is a client component that uses useState.
 - We need to update the state of TodoList when AddTodoForm is submitted.

Notes 2/2/2025:
- Onblur is not a good event to use to close the edit mode. It seems to prevent the form from being submitted.


Notes 2/9/2025:
- Client side sorting does not keep persist after updating the data.
- We think this is because Next.js is refreshing the page.


Notes 2/16/2025:
- We decided to split the business by route/feature for now
- We will see if we need to change it later.


Notes 2/23/2025:
- We noticed a trade off between using server actions and client side updates. The server actions did not update the client reliably
- We tried revalidating the path, but it did not work.
- We want to investigate if there is some trick/config to make it work.


Notes 5/11/2025:
- Stop using React Query to creat list on home page.
- Server actions and revalidatePath work fine.

Notes 5/18/2025:
- We added collaboration


Notes 7/13/2025:
- Added opaque types to the project.
- Added role to ListCollaborator table.
- Updated findOrCreateAccount to use UserEmail and UserName opaque types.
